import{QuiltConfig as i,Player as e,SpatialType as t,StereoMode as n}from"three-spatial-viewer";import{Scene as r,WebGLRenderer as a,PerspectiveCamera as s,TextureLoader as o}from"three";function l(i,e,t,n,r,a,s){try{var o=i[a](s),l=o.value}catch(i){return void t(i)}o.done?e(l):Promise.resolve(l).then(n,r)}class h{constructor(){this.url=void 0,this.container=void 0}}class c{constructor(i){var e=this;this.props=new h,this.scene=void 0,this.renderer=void 0,this.spatialPlayer=void 0,this.camera=void 0,this.setProps(this.props,i),this.props.container?(this.initThree(),this.props.url&&this.loadGawdConfig(this.props.url).then((function(i){e.initGawd(i)}))):console.warn("No container was set")}initThree(){var i=this;this.scene=new r,this.renderer=new a({antialias:!0}),this.renderer.setSize(this.props.container.clientWidth,this.props.container.clientHeight),this.renderer.xr.enabled=!1,this.props.container.appendChild(this.renderer.domElement),this.camera=new s(90,this.aspectRatio,.01,1e3),this.camera.position,this.scene.add(this.camera),this.camera.position.z=10,this.renderer.setAnimationLoop((function(){i.render()})),window.addEventListener("resize",(function(e){i.camera.aspect=i.aspectRatio,i.camera.updateProjectionMatrix(),i.renderer.setSize(i.props.container.clientWidth,i.props.container.clientHeight)})),window.addEventListener("mousemove",this.onMouseMove.bind(this))}render(){this.renderer.render(this.scene,this.camera)}onMouseMove(i){if(this.spatialPlayer){var e=this.spatialPlayer.quiltColumns*this.spatialPlayer.quiltRows,t=i.clientX/window.innerWidth;this.spatialPlayer.quiltAngle=Math.round(t*e)}}initGawd(i){console.log("Loading ".concat(i.name,"..."));var e=i.assets.filter((function(i){return"lookingglass"==i.spatial&&"FourKSquare"==i.quiltType}));this.initMedia(e[0])}initMedia(i){"image/png"==i.contentType?(console.log("Loading image: ".concat(i.url)),(new o).load(i.url,function(e){this.loadSpatialPlayer(e,i)}.bind(this))):i.contentType}loadSpatialPlayer(r,a){var s=new i;s.columns=a.quilt.columns>0?a.quilt.columns:8,s.rows=a.quilt.rows>0?a.quilt.rows:6,s.width=a.viewSize.width>0?a.viewSize.width:480,s.height=a.viewSize.height>0?a.viewSize.height:640,this.spatialPlayer=new e(r,null,{spatialType:t.LOOKING_GLASS,stereoMode:n.COLOR,quilt:s}),this.scene.add(this.spatialPlayer);var o=this.camera.position.z-this.spatialPlayer.position.z,l=this.aspectRatio;this.camera.fov=Math.atan(l/o)*(180/Math.PI),this.camera.updateProjectionMatrix(),console.log(this.spatialPlayer)}loadGawdConfig(i){return(e=function*(){var e=yield fetch(i);return yield e.json()},function(){var i=this,t=arguments;return new Promise((function(n,r){var a=e.apply(i,t);function s(i){l(a,n,r,s,o,"next",i)}function o(i){l(a,n,r,s,o,"throw",i)}s(void 0)}))})();var e}setProps(i,e){if(e)for(var t in e)t in i?i[t]=e[t]:console.warn("GawdViewer: Provided ".concat(t," in config but it is not a valid property and will be ignored"))}get aspectRatio(){return this.props.container.clientWidth/this.props.container.clientHeight}}export{c as Player,h as PlayerProps};
//# sourceMappingURL=gawd-player.esm.min.js.map
