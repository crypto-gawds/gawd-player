{"version":3,"file":"gawd-player.amd.min.js","sources":["../src/components/player.ts"],"sourcesContent":["import * as http from 'http';\nimport { SpatialType, StereoMode } from 'three-spatial-viewer';\nimport { SpatialPlayer, QuiltConfig } from './spatial-viewer'\nimport { WebGLRenderer, PerspectiveCamera, Scene, ImageLoader, TextureLoader, Texture } from './three'\n\nclass Props {\n  public url: string\n  public container: HTMLElement\n}\n\nclass Gawd {\n  public name: string\n  public assets: Array<GawdAsset>\n}\n\nclass GawdAsset {\n  public url: string\n  public spatial: string\n  public quilt: GawdQuilt\n  public quiltType: string\n  public size: Resolution\n  public viewSize: Resolution\n  public contentType: string\n}\n\nclass GawdQuilt {\n  public columns: number\n  public rows: number\n}\n\nclass Resolution {\n  public width: number\n  public height: number\n}\n\nexport { Props as PlayerProps, Gawd, GawdAsset }\n\nexport default class Player {\n\n  private props: Props = new Props()\n  private scene: Scene\n  private renderer: WebGLRenderer\n  private spatialPlayer: SpatialPlayer\n  private camera: PerspectiveCamera\n\n  constructor(props?: object) {\n    this.setProps(this.props, props)\n\n    if (this.props.container) {\n      this.initThree()\n    }\n    else {\n      console.warn(`No container was set`)\n      return;\n    }\n\n    if (this.props.url) {\n      this.loadGawdConfig(this.props.url).then(data => {\n        this.initGawd(data)\n      });\n    }\n  }\n\n  private initThree(): void {\n    this.scene = new Scene();\n\n    this.renderer = new WebGLRenderer({ antialias: true });\n    this.renderer.setSize(this.props.container.clientWidth, this.props.container.clientHeight);\n    this.renderer.xr.enabled = false;\n    this.props.container.appendChild(this.renderer.domElement);\n\n    this.camera = new PerspectiveCamera(90, this.aspectRatio, 0.01, 1000);\n    this.camera.position\n\n    this.scene.add(this.camera);\n\n    this.camera.position.z = 10;\n\n    this.renderer.setAnimationLoop(() => {\n      this.render()\n    });\n\n    window.addEventListener('resize', ev => {\n      this.camera.aspect = this.aspectRatio\n      this.camera.updateProjectionMatrix()\n      this.renderer.setSize(this.props.container.clientWidth, this.props.container.clientHeight)\n    })\n\n    window.addEventListener('mousemove', this.onMouseMove.bind(this))\n  }\n\n  private render(): void {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  private onMouseMove(e: MouseEvent): void {\n    if (this.spatialPlayer) {\n      let totalAngles = this.spatialPlayer.quiltColumns * this.spatialPlayer.quiltRows\n      let xpos = e.clientX / window.innerWidth\n      // console.log(e.clientX, window.innerWidth, xpos, totalAngles)\n      this.spatialPlayer.quiltAngle = Math.round(xpos * totalAngles)\n    }\n  }\n\n  private initGawd(gawd: Gawd): void {\n    console.log(`Loading ${gawd.name}...`)\n    let lkgAssets: GawdAsset[] = gawd.assets.filter(a => a.spatial == 'lookingglass' && a.quiltType == 'FourKSquare')\n    this.initMedia(lkgAssets[0])\n  }\n\n  private initMedia(asset: GawdAsset): void {\n    if (asset.contentType == \"image/png\") {\n      console.log(`Loading image: ${asset.url}`)\n      const loader = new TextureLoader()\n      loader.load(asset.url, function (tex) {\n        this.loadSpatialPlayer(tex, asset)\n      }.bind(this))\n    }\n    else if (asset.contentType == 'video/mp4') {\n      // TODO\n    }\n  }\n\n  private loadSpatialPlayer(texture: Texture, asset: GawdAsset): void {\n    let config = new QuiltConfig();\n    config.columns = asset.quilt.columns > 0 ? asset.quilt.columns : 8\n    config.rows = asset.quilt.rows > 0 ? asset.quilt.rows : 6\n    config.width = asset.viewSize.width > 0 ? asset.viewSize.width : 480\n    config.height = asset.viewSize.height > 0 ? asset.viewSize.height : 640\n\n    this.spatialPlayer = new SpatialPlayer(texture, null, {\n      spatialType: SpatialType.LOOKING_GLASS,\n      stereoMode: StereoMode.COLOR,\n      quilt: config,\n    })\n\n    this.scene.add(this.spatialPlayer)\n\n    let dist = this.camera.position.z - this.spatialPlayer.position.z;\n    let height = this.aspectRatio; // desired height to fit WHY IS THIS CALLED HEIGHT?\n    this.camera.fov = Math.atan(height / dist) * (180 / Math.PI);\n    this.camera.updateProjectionMatrix();\n\n    console.log(this.spatialPlayer)\n  }\n\n  private async loadGawdConfig(url: string): Promise<any> {\n    const response = await fetch(url)\n    return await response.json()\n  }\n\n  private setProps(viewerProps: Props, userProps?: object): void {\n    if (!userProps) return\n\n    for (let prop in userProps) {\n      if (prop in viewerProps) {\n        viewerProps[prop] = userProps[prop]\n      } else {\n        console.warn(\n          `GawdViewer: Provided ${prop} in config but it is not a valid property and will be ignored`,\n        )\n      }\n    }\n  }\n\n  public get aspectRatio(): number {\n    return this.props.container.clientWidth / this.props.container.clientHeight\n  }\n}\n"],"names":["Props","url","container","constructor","props","scene","renderer","spatialPlayer","camera","setProps","this","initThree","loadGawdConfig","then","data","_this","initGawd","console","warn","Scene","WebGLRenderer","antialias","setSize","clientWidth","clientHeight","xr","enabled","appendChild","domElement","PerspectiveCamera","aspectRatio","position","add","z","setAnimationLoop","_this2","render","window","addEventListener","ev","aspect","updateProjectionMatrix","onMouseMove","bind","e","totalAngles","quiltColumns","quiltRows","xpos","clientX","innerWidth","quiltAngle","Math","round","gawd","log","name","lkgAssets","assets","filter","a","spatial","quiltType","initMedia","asset","contentType","TextureLoader","load","tex","loadSpatialPlayer","texture","config","QuiltConfig","columns","quilt","rows","width","viewSize","height","SpatialPlayer","spatialType","SpatialType","LOOKING_GLASS","stereoMode","StereoMode","COLOR","dist","fov","atan","PI","response","fetch","json","viewerProps","userProps","prop"],"mappings":"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"}